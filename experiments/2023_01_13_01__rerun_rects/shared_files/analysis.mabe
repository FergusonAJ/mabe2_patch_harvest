Var num_trials = 100;
Var cur_genome;
Var trial_num;
Var did_repro = "False";

patch_harvest.track_movement = 1;

DataFile fit_file { filename="single_org_fitness.csv"; };
fit_file.ADD_COLUMN("trial_number", "trial_num" );
fit_file.ADD_SETUP("cur_genome = main_pop.CALC_MODE('genome')" );
fit_file.ADD_COLUMN("genome", "cur_genome" );
fit_file.ADD_COLUMN("merit",      "main_pop.CALC_MEAN('child_merit')" );
fit_file.ADD_COLUMN("genome_length", "main_pop.CALC_MEAN('genome_length')" );
fit_file.ADD_COLUMN("movements", "main_pop.CALC_MODE('movements')" );
fit_file.ADD_COLUMN("map_idx", "main_pop.CALC_MODE('map_idx')" );
fit_file.ADD_COLUMN("did_repro", "did_repro");

@START() {
  patch_harvest.verbose=1;
  PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
  trial_num = 0;
  WHILE(trial_num < num_trials){
    Population empty_pop;  
    main_pop.REPLACE_WITH(empty_pop);
    main_pop.INJECT("avida_org", 1);    // Inject organism 
    Var repro_updates = scheduler.EVAL(main_pop, 10000, 1); // Evaluate organism   
    IF(repro_updates >= 10000){ // No repro
      did_repro = "False";
      fit_file.WRITE();
      PRINT("[HARVEST] break");
    }
    trial_num = trial_num + 1;
  }
  PRINT("Ran ", trial_num, " trials!");
  EXIT();
};
@BEFORE_REPRO(){
  did_repro="True";
  fit_file.WRITE();
  PRINT("[HARVEST] break");
}
